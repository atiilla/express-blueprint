#!/usr/bin/env node
const path = require("path");
const {
    clear,
    colors,
    createDirectory,
    createFile,
    displayMessage,
} = require(path.join(__dirname, "modules", "utils"));

const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const withMongo = require(path.join(__dirname, "modules", "withMongo"));
const withMysql = require(path.join(__dirname, "modules", "withMysql"));


clear();
displayMessage('Express Project Generator Tool', colors.GREEN);
displayMessage('This tool will generate an Express project structure for you', colors.YELLOW);
console.log('-------------------------------------');
console.log('Author: https://github.com/atiilla');
console.log('Version: 0.0.1');
console.log('-------------------------------------');

rl.question(`${colors.YELLOW}Enter project name:${colors.NC}`, (projectName) => {
    createDirectory(projectName);
    process.chdir(projectName);

    createFile('.gitignore', 'node_modules\n.env\n');

    // Create Dockerfile
    createFile('Dockerfile', `# Use an official Node.js runtime as the base image
    FROM node:18.14.0-alpine3.14
    
    # Set the working directory to /app
    WORKDIR /app
    
    # Copy package.json and package-lock.json to the working directory
    COPY package*.json ./
    
    # Install any needed packages specified in package.json
    RUN npm install
    
    # Copy the current directory contents into the container at /app
    COPY . .
    
    # Make port 3000 available to the world outside this container
    EXPOSE 3000
    
    # Run app.js when the container launches
    CMD ["node", "app.js"]
    `);

    // Create docker-compose.yml
    createFile('docker-compose.yml', `version: "3"
    services: app:
    build: .
    ports: - "3000:3000"
    volumes: - .:/app
    command: "npm run dev"
    `);

    // Create directory for views
    createDirectory('views');
    createDirectory('views/partials');
    createDirectory('views/layouts');
    createDirectory('views/pages');
    createDirectory('views/css');

    // ejs template engine
    createFile('views/index.ejs', `<h1>Express Project Generator</h1>
    <p>Project generated by <a href="#"><%= title %></a></p>`);
    createFile('views/layout.ejs', `<html>
    <head>
        <title>Express Project Generator</title>
        <link rel="stylesheet" href="/css/style.css">
    </head>
    <body>
        <%- body %>
    </body>
    </html>`);
    createFile('views/partials/header.ejs', `<header>
    <h1>Express Project Generator</h1>
    <p>Project generated by <a href="https://www.npmjs.com/package/exprez">Express Project Generator</a></p>
    </header>`);
    createFile('views/partials/footer.ejs', `<footer>
    <p>Express Project Generator</p>
    </footer>`);
    
    createFile('views/css/style.css', `body {
    font-family: Arial, Helvetica, sans-serif;
    background: #f4f4f4;
    line-height: 1.6em;
    margin: 0;
    padding: 0;
    }

    header, footer {
    background: #333;
    color: #fff;
    padding: 20px;
    text-align: center;
    }

    header a, footer a {
    color: #fff;
    text-decoration: none;
    }

    header ul {
    margin: 0;
    padding: 0;
    }

    header li {
    display: inline-block;
    margin-right: 20px;
    }

    header li:last-child {
    margin-right: 0;
    }

    header a {
    color: #fff;

    }

    header a:hover {
    color: #ccc;
    }

    footer {
    padding: 20px;
    }

    footer p {
    margin: 0;
    }`);
   

    // Let user choice between mongodb or mysql
    rl.question(`${colors.YELLOW}1. MongoDB\n2. MySQL\n${colors.NC}`, (dbChoice) => {
        console.log(`You have selected ${dbChoice == 1 ? 'MongoDB' : 'MySQL'}`);
        if (dbChoice == 1) {

            // Project with mongodb
            rl.question(`${colors.YELLOW}Enter mongodb uri:${colors.NC}`, (mongodbUri) => {
                rl.question(`${colors.YELLOW}Enter port number:${colors.NC}`, (portNumber) => {
                    rl.question(`${colors.YELLOW}Enter jwt secret:${colors.NC}`, (jwtSecret) => {
                        withMongo(mongodbUri,portNumber,jwtSecret,projectName,rl);
                    });
                });
            });

        } else {
            rl.question(`${colors.YELLOW}Enter mysql host:${colors.NC}`, (mysqlHost) => {
                rl.question(`${colors.YELLOW}Enter port number:${colors.NC}`, (portNumber) => {
                    rl.question(`${colors.YELLOW}Enter mysql user:${colors.NC}`, (mysqlUser) => {
                        rl.question(`${colors.YELLOW}Enter mysql password:${colors.NC}`, (mysqlPassword) => {
                            rl.question(`${colors.YELLOW}Enter mysql database:${colors.NC}`, (mysqlDatabase) => {
                                // jwtsecret
                                rl.question(`${colors.YELLOW}Enter jwt secret:${colors.NC}`, (jwtSecret) => {

                                    withMysql(mysqlUser,mysqlHost,mysqlPassword,mysqlDatabase,portNumber,jwtSecret,projectName,rl)
                                })
                            });
                        });
                    });
                })
            });
        }
    });

});